{"version":3,"sources":["file/Header.js","file/Header2.js","file/Footer.js","file/Footer2.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","src","alt","Width","keterangan","Header2","keterangan2","Footer","state","pesanDariState","ubahDataState","bind","e","preventDefault","this","setState","pesanDariProps","href","onClick","Component","Footer2","pesanKhusus","handlePesanKhusus","valueke1","ke2","ke3","alert","pesanDariProps2","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNAWeA,MARf,SAAgBC,GACd,OACE,6BACE,yBAAKC,IAAI,mDAAmDC,IAAI,SAASC,MAAM,QAC/E,4BAAKH,EAAMI,cCGFC,EAPC,SAACL,GACf,OACE,6BACE,4BAAKA,EAAMM,e,mCCsBFC,E,kDAxBb,WAAYP,GAAO,IAAD,8BAChB,cAAMA,IACDQ,MAAM,CACXC,eAAgB,yBAEd,EAAKC,cAAc,EAAKA,cAAcC,KAAnB,gBALL,E,0DAQNC,GACZA,EAAEC,iBAEFC,KAAKC,SAAS,CAACN,eAAgB,0B,+BAGtB,IAAD,OACN,OACE,6BACA,2BAAIK,KAAKd,MAAMgB,gBACf,4BAAI,2BAAIF,KAAKN,MAAMC,iBACnB,uBAAGQ,KAAK,IAAIC,QAAS,SAACN,GAAD,OAAK,EAAKF,cAAcE,KAA7C,gB,GArBeO,aC+BNC,E,kDA7Bb,WAAYpB,GAAO,IAAD,8BAChB,cAAMA,IACDQ,MAAM,CACXa,YAAa,kCAEb,EAAKC,kBAAkB,EAAKA,kBAAkBX,KAAvB,gBALP,E,8DAQAY,EAAUC,EAAKC,EAAIb,GAEjCA,EAAEC,iBAEDa,MAAMZ,KAAKN,MAAMa,aACjBK,MAAMH,GACNG,MAAMF,GACNE,MAAMD,K,+BAIF,IAAD,OACN,OACE,6BACA,2BAAIX,KAAKd,MAAM2B,iBACf,uBAAGV,KAAK,IAAIC,QAAS,SAACN,GAAD,OAAK,EAAKU,kBAAkB,8BAA+B,iCAAiC,sBAAsBV,KAAvI,qB,GAzBgBO,aCoBPS,MAZf,WACE,OACE,yBAAKC,UAAU,OAEb,6CACA,kBAAC,EAAD,CAAQzB,WAAW,+CACnB,kBAAC,EAAD,CAASE,YAAY,mDACrB,kBAAC,EAAD,CAAQU,eAAiB,aACzB,4BAAI,kBAAC,EAAD,CAASW,gBAAkB,gCCNjBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.973f66c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// pakai function model ke 1\r\nfunction Header(props){\r\n  return(\r\n    <div>\r\n      <img src=\"https://cdn.wallpapersafari.com/91/81/7R6K05.jpg\" alt=\"Mesjid\" Width=\"80%\" />\r\n      <h3>{props.keterangan}</h3>\r\n    </div>\r\n  )\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\n\r\n//pakai function model ke 2\r\nconst Header2 = (props) =>{\r\n  return(\r\n    <div>\r\n      <h3>{props.keterangan2}</h3>\r\n    </div>\r\n  )\r\n}\r\nexport default Header2;\r\n","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n    pesanDariState: 'Apakah Kunci BAHAGIA?'\r\n    }\r\n      this.ubahDataState=this.ubahDataState.bind(this);\r\n  }\r\n\r\nubahDataState(e){\r\n  e.preventDefault()\r\n  //perintah untuk mengubah value/data/isi yang berada di dalam state\r\n  this.setState({pesanDariState: \"Pandailah BERSYUKUR\"})\r\n}\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n      <p>{this.props.pesanDariProps}</p>\r\n      <h2><p>{this.state.pesanDariState}</p></h2>\r\n      <a href=\"/\" onClick={(e)=>this.ubahDataState(e)}>JAWABAN</a>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\n\r\nclass Footer2 extends Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n    pesanKhusus: 'Rahasia Sukses Pertama: DZIKIR'\r\n    }\r\n    this.handlePesanKhusus=this.handlePesanKhusus.bind(this);\r\n  }\r\n\r\n  handlePesanKhusus(valueke1, ke2, ke3,e){\r\n    // e di bawah dan di atas ini mencegah reload\r\n      e.preventDefault()\r\n\r\n       alert(this.state.pesanKhusus)\r\n       alert(valueke1)\r\n       alert(ke2)\r\n       alert(ke3)\r\n\r\n     }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n      <p>{this.props.pesanDariProps2}</p>\r\n      <a href=\"/\" onClick={(e)=>this.handlePesanKhusus(\"Rahasia Sukses Kedua: FIKIR\", \"Rahasia Sukses Ketiga: IKHTIAR\",\"Selamat BERBAHAGIA!\",e)}>Klik di Sini</a>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\nexport default Footer2;\r\n","import React from 'react';\n// import gbr from './file/gbr.svg';\nimport './App.css';\n\nimport Header from './file/Header'\nimport Header2 from './file/Header2'\n\nimport Footer from './file/Footer'\nimport Footer2 from './file/Footer2'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <h3>PITUTUR SEPUH</h3>\n      <Header keterangan=\"SYUKURI apa yang ada, hidup adalah ANUGRAH\" />\n      <Header2 keterangan2=\"TETAP jalani hidup ini, melakukan yang TERBAIK\" />\n      <Footer pesanDariProps = \"Nasihat:\" />\n      <h3><Footer2 pesanDariProps2 = \"Mau tahu rahasia sukses?\" /></h3>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}